// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proiect_Medii_Restaurantul_Meu.Data;

#nullable disable

namespace Proiect_Medii_Restaurantul_Meu.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250106142910_AddedImageUrl")]
    partial class AddedImageUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Aperitiv"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Antree"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Garnitura"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Desert"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Bautura Racoritoare"
                        });
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Vita"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Pui"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Porc"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Somon"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Salata Verde"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Rosie"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Ardei Iute"
                        },
                        new
                        {
                            IngredientId = 15,
                            Name = "Ceapa"
                        },
                        new
                        {
                            IngredientId = 9,
                            Name = "Usturoi"
                        },
                        new
                        {
                            IngredientId = 10,
                            Name = "Cartofi"
                        },
                        new
                        {
                            IngredientId = 11,
                            Name = "Orez"
                        },
                        new
                        {
                            IngredientId = 12,
                            Name = "Zahar"
                        },
                        new
                        {
                            IngredientId = 13,
                            Name = "Sirop de Cola"
                        },
                        new
                        {
                            IngredientId = 14,
                            Name = "Grasime de Porc"
                        });
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Vita de cea mai buna calitate",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Beef Tartar",
                            Price = 50.50m,
                            Stock = 23
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "O experienta culinara mediteraneana la tine acasa",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Somon cu sos Grecesc",
                            Price = 80.50m,
                            Stock = 10
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Description = "Cel mai crocant snitel din Cluj",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Snitel Vienez",
                            Price = 25.00m,
                            Stock = 80
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3,
                            Description = "Orez ca pe Valea Indului",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Orez Indian",
                            Price = 5.20m,
                            Stock = 200
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 4,
                            Description = "Cel mai bun desert",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Creme Brule",
                            Price = 15.00m,
                            Stock = 80
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Description = "O experienta americana",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Cartofi Prajiti in Grasime de vita",
                            Price = 15.00m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 5,
                            Description = "Nu dai gres",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Coca-Cola Zero",
                            Price = 10.00m,
                            Stock = 500
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "Mai buna decat la bunica",
                            ImageUrl = "https://via.placeholder.com/150",
                            Name = "Tochitura de Porc",
                            Price = 65.00m,
                            Stock = 30
                        });
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 11
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 12
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 10
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 13
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 14
                        });
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Order", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.OrderItem", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Product", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.ProductIngredient", b =>
                {
                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_Medii_Restaurantul_Meu.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Proiect_Medii_Restaurantul_Meu.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
